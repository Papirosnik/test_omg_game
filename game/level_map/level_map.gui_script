local messages = require "game.common.messages"
local levels_holder = require "game.common.levels_holder"
local user_progress = require "game.common.user_progress"


local MSG_CREATE_LEVEL_ITEMS = hash("create_level_items")

local HASH_ITEM_ROOT = hash("item/root")
local HASH_ITEM_TEXT = hash("item/text")
local HASH_ITEM_FLAG = hash("item/flag")
local HASH_SCROLL_AREA = hash("scroll_area")

local ITEMS_GAP = 200
local SCROLL_ANIM_TIME = 0.75
local SCROLL_ANIM_DELAY = 0.75
local MARKER_ANIM_TIME = 0.4

function init(self)
    msg.post(".", "acquire_input_focus")
    self.root_node = gui.get_node("root")
    self.btn_play = gui.get_node("btn_play")
    self.item_root = gui.get_node(HASH_ITEM_ROOT)
    self.item_text = gui.get_node(HASH_ITEM_TEXT)
    self.item_flag = gui.get_node(HASH_ITEM_FLAG)
    self.scroll_area = gui.get_node(HASH_SCROLL_AREA)
    self.items = {}
    msg.post("#", MSG_CREATE_LEVEL_ITEMS)
end


local function clear(self)
    for i = 1, #self.items do
        for _, node in pairs(self.items[i]) do
            gui.delete_node(node)
        end
    end
    self.items = {}
end


function final(self)
    clear(self)
end


local function on_button_press(btn_node)
    gui.animate(btn_node, gui.PROP_SCALE, vmath.vector3(0.85), gui.EASING_LINEAR, 0.07)
    sound.play("main:/main#sound_click", {pan = 0.0})
end


local function on_button_release(btn_node)
    gui.animate(btn_node, gui.PROP_SCALE, vmath.vector3(1), gui.EASING_LINEAR, 0.07)
end


local function goto_game(self)
    local fn_done = function()
        gui.set_scale(self.root_node, vmath.vector3(1))
        gui.set_enabled(self.root_node, false)
        msg.post("main:/main#main", messages.LOAD_LEVEL)
    end
    gui.animate(self.root_node, "scale.x", 0, gui.EASING_INBACK, 0.5, 0, fn_done) 
end


local function scroll_to_level(self, from_index, target_index)
    gui.animate(self.scroll_area, "position.x", -(target_index - 1) * ITEMS_GAP, gui.EASING_INOUTSINE, SCROLL_ANIM_TIME, SCROLL_ANIM_DELAY)

    local marker_start = SCROLL_ANIM_DELAY + SCROLL_ANIM_TIME

    local prev_marker_node = self.items[from_index][HASH_ITEM_FLAG]
    gui.animate(prev_marker_node, "color.w", 0, gui.EASING_LINEAR, MARKER_ANIM_TIME, marker_start)

    local next_marker_node = self.items[target_index][HASH_ITEM_FLAG]
    gui.animate(next_marker_node, "color.w", 1, gui.EASING_LINEAR, MARKER_ANIM_TIME, marker_start)
end


local function activate(self)

    local next_ind = user_progress:current_level_index()
    local prev_ind = (next_ind - 1 < 1) and levels_holder:count() or (next_ind -1)

    clear(self)
    for i = 1, levels_holder:count() do
        local level = levels_holder:get_level_by_index(i)
        table.insert(self.items, gui.clone_tree(self.item_root))

        local new_root = self.items[i][HASH_ITEM_ROOT]
        gui.set_parent(new_root, self.scroll_area, false)
        gui.set_scale(new_root, vmath.vector3(0))
        gui.set_enabled(new_root, true)
        gui.set_position(new_root, vmath.vector3((i - 1) * ITEMS_GAP, 0, 0))
        gui.animate(new_root, gui.PROP_SCALE, vmath.vector3(1), gui.EASING_OUTBACK, 0.2, 0.1 * i)

        local new_text = self.items[i][HASH_ITEM_TEXT]
        gui.set_text(new_text, i)

        local new_flag = self.items[i][HASH_ITEM_FLAG]
        gui.set_alpha(new_flag, (i == prev_ind) and 1 or 0)
    end
    gui.set_position(self.scroll_area, vmath.vector3(-(prev_ind - 1) * ITEMS_GAP, 0, 0))
    scroll_to_level(self, prev_ind, next_ind)
end


function on_input(self, action_id, action)
    if action_id == hash("touch") then
        local inside_play_button = gui.pick_node(self.btn_play, action.x, action.y)
        if action.pressed and inside_play_button then
            on_button_press(self.btn_play)
        elseif action.released then
            on_button_release(self.btn_play)
            if inside_play_button then
                goto_game(self)
            end
        end
    end
end


function on_message(self, message_id, message, sender)
    print(message_id)
    if message_id == MSG_CREATE_LEVEL_ITEMS then
        activate(self)
    end
end
