local const  = require  "game.common.constants"
local messages = require "game.common.messages"
local grid_storage = require "game.game.grid_storage"
local input_storage = require "game.game.input_storage"


local normal_cell_color = vmath.vector4(0.9, 0.9, 0.8, 1)
local active_cell_color = vmath.vector4(0, 0.9, 0.9, 1)


function init(self)
    msg.post(".", "acquire_input_focus")
    grid_storage:reset()
    self.input_active = false
end


local function get_cell_root_node(cell)
    return cell.nodes[const.HASH_CELL_ROOT]
end


local function add_to_input(self, cell)
    if input_storage:push(cell) then
        gui.animate(get_cell_root_node(cell), gui.PROP_COLOR, active_cell_color, gui.EASING_LINEAR, 0.15)
        msg.post("/game/game#game_gui", messages.INPUT_CHANGED, { input = input_storage.word })
        return true
    end
end


local function remove_last_input()
    local cell = input_storage:pop()
    if cell then
        if not cell["done"] then -- don't change already painted cells
            gui.animate(get_cell_root_node(cell), gui.PROP_COLOR, normal_cell_color, gui.EASING_LINEAR, 0.15)
        end
        msg.post("/game/game#game_gui", messages.INPUT_CHANGED, { input = input_storage.word })
        return true
    end
end


local function clear_input()
    while remove_last_input() do end
end


local function finish_input(self, do_check_words)
    if do_check_words then
        msg.post("/game/game#game_gui", messages.INPUT_COMPLETED, { input = input_storage.word })
    else
        clear_input()
    end
end


-- returns true if the input set was changed
local function update_input(self, pos_x, pos_y)

    local cell = grid_storage:get_cell_by_screen_pos(pos_x, pos_y)
    if not cell or cell["done"] then return end

    -- check for very rare (but still possible) case - diagonal movement
    local last_cell = input_storage:top()
    if last_cell then
        local last_cell_pos = last_cell["cell_pos"]
        local manhattan_dist = math.abs(last_cell_pos.x - cell.cell_pos.x) + math.abs(last_cell_pos.y - cell.cell_pos.y)
        if manhattan_dist >= 2 then
            return false
        end
    end

    -- check if we came back to the penultimate cell (then remove the last one)
    if input_storage:contains(cell) then
        if input_storage:index_of(cell) == input_storage:size() - 1 then
            remove_last_input(self)
            sound.play("/main#sound_negative", { pan = 0.0, gain = 0.1 })
            return true
        end
    else
        if add_to_input(self, cell) then
            sound.play("/main#sound_beep", { pan = 0.0, gain = 0.1 })
            return true
        end
    end
end


local function hide_info()
    msg.post("/game/game#game_gui", messages.HIDE_INFO)
end


local function load_level()
    grid_storage:create_grid()
end


function on_input(self, action_id, action)

    if not grid_storage.is_ready then return end

    if action_id == hash("touch") then
        if action.pressed then
            clear_input()
            hide_info()
            self.input_active = true
            update_input(self, action.x, action.y)
        elseif action.released then
            self.input_active = false
            local inside_grid = (grid_storage:get_cell_by_screen_pos(action.x, action.y) ~= nil)
            finish_input(self, inside_grid)
        end
    elseif action_id == nil and self.input_active then
        -- mouse movement with the pressed button
        update_input(self, action.x, action.y)
    end
end


function on_message(self, message_id, message, sender)
    if message_id == messages.LOAD_LEVEL then
        load_level()
    elseif message_id == messages.WORD_ACCEPTED then
        grid_storage:set_word_completed()
    elseif message_id == messages.WORD_REJECTED then
        clear_input(self)
    end
end
