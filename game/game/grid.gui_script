local user_progress = require "game.common.user_progress"
local levels_holder = require "game.common.levels_holder"
local messages = require "game.common.messages"

function init(self)
    self.cells = {}
end

local function current_level()
    return levels_holder:get_level_by_index(user_progress:current_level_index())
end

local function clear_grid(self)
    for i = 1, #self.cells do
        for _, node in pairs(self.cells[i]) do
            gui.delete_node(node)
        end
    end
end

local function create_grid(self)

    local level = current_level()
    
    print("Create grid for level " .. level.name)

    clear_grid(self)

    -- Create cells according to the level data
    self.cells = {}
    local template = gui.get_node("cell/root")
    for y = 1, level.size do
        for x = 1, level.size do

            local cell_index = (y - 1) * level.size + x

            local new_cell = gui.clone_tree(template)

            local new_root = new_cell[hash("cell/root")]
            local new_id = "cell_" .. x .. "x" .. y
            gui.set_id(new_root, new_id)
            
            local new_text = new_cell[hash("cell/text")]
            local new_text_id = new_id .. "_text"
            gui.set_id(new_text, new_text_id)
            
            local new_cover = new_cell[hash("cell/cover")]
            local new_cover_id = new_id .. "_cover"
            gui.set_id(new_cover, new_cover_id)
            
            self.cells[cell_index] = {
                [new_id] = new_root,
                [new_text_id] = new_text,
                [new_cover_id] = new_cover,
            }

            -- cells positioning and scaling (if needed)
            local need_scale = level.size > 4
            local scale_factor = need_scale and (4 / level.size) or 1
            local pos = gui.get_position(new_root)
            local mid = (level.size + 1) / 2
            pos.x = 320 + (x - mid) * 130 * scale_factor
            pos.y = 400 - (y - mid) * 130 * scale_factor
            gui.set_position(new_root, pos)

            gui.set_scale(new_root, vmath.vector3(0))
            gui.animate(new_root, gui.PROP_SCALE, scale_factor, gui.EASING_OUTBOUNCE, 0.75)

            gui.set_enabled(new_root, true)
        end
    end

    -- set letters for each cell
    for word, position in pairs(level.words) do
        print(word)
        for i = 1, #word do
            local pos_index = (i - 1) * 2 + 1
            local cell_x, cell_y = position[pos_index], position[pos_index + 1]

            -- find the text node for the given letter/cell
            local node_name = "cell_" .. cell_x .. "x" .. cell_y .. "_text"
            print(node_name)
            local text_node = gui.get_node(hash(node_name))
            if text_node then
                gui.set_text(text_node, word:sub(i, i))
            else
                print("NOT FOUND!")
            end
        end
    end
    
end

function on_message(self, message_id, message, sender)
    if message_id == messages.START_NEW_LEVEL then
        
    elseif message_id == messages.CREATE_LEVEL_GRID then
        create_grid(self, message)
    end
end

function on_input(self, action_id, action)
end